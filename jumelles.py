# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Jumelles
                                 A QGIS plugin
 Recherche des lieux ou des entités géographiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Antoine de Préville
        email                : antoine.de_preville@bluewin.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import json
import sys

import requests
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject, pyqtSlot
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import *
from qgis._core import QgsPoint, QgsRectangle, QgsFillSymbol, QgsSingleSymbolRenderer
from qgis.utils import iface

# Initialize Qt resources from file resources.py
# from .resources import *
# Import the code for the dialog
from .jumelles_dialog import JumellesDialog
import os.path
import geopandas as gpd


class Jumelles:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Jumelles_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Jumelles')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.ui = JumellesDialog()
        self.ui.pushButton_rechercher.clicked.connect(self.run)

    def param(self):
        self.ui.lineEdit_offre.setDisabled(False)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Jumelles', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = '/home/antoine/.local/share/QGIS/QGIS3/profiles/default/python/plugins/jumelles/jumelles.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Jumelles'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Jumelles'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = JumellesDialog()

        # show the dialog
        self.ui.show()
        # Run the dialog event loop
        result = self.ui.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            inputOffres = self.ui.lineEdit_offre.text()
            inputDossiers = self.ui.lineEdit_dossier.text()
            inputParcelles = self.ui.lineEdit_parcelle.text()
            inputCommunes = self.ui.lineEdit_commune.text()
            if inputOffres != "":
                self.offres(inputOffres)
            elif inputDossiers != "":
                self.dossiers(inputDossiers)
            elif inputParcelles != "":
                self.parcelles(inputParcelles)
            elif inputCommunes != "":
                self.communes(inputCommunes)

    def dossiers(self, input):
        dossierLayer = iface.activeLayer()
        featDossiers = dossierLayer.getFeatures()
        for f in featDossiers:
            if str(f['Mandat']) == input:
                self.ui.listWidget_resultats.addItem(f['Mandat'])
                canvas = iface.mapCanvas()
                x = f.geometry().asPoint().x()
                y = f.geometry().asPoint().y()
                zoom_factor = 50.0
                rect = QgsRectangle(x - zoom_factor, y - zoom_factor, x + zoom_factor, y + zoom_factor)
                canvas.setExtent(rect)
                QgsPoint(x, y)
                canvas.refresh()
                break

            self.ui.lineEdit_dossier.clear()

    def offres(self, input):
        df = iface.activeLayer()
        features = df.getFeatures()
        for f in features:
            if f['Num_offre'].__contains__(input):
                self.ui.listWidget_resultats.addItem(f['Num_offre'])
                canvas = iface.mapCanvas()
                x = f.geometry().asPoint().x()
                y = f.geometry().asPoint().y()
                zoom_factor = 50.0
                rect = QgsRectangle(x - zoom_factor, y - zoom_factor, x + zoom_factor, y + zoom_factor)
                canvas.setExtent(rect)
                QgsPoint(x, y)
                canvas.refresh()
                break

        self.ui.lineEdit_offre.clear()

    def parcelles(self, input):
        parcellesLayer = iface.activeLayer()
        featParcelles = parcellesLayer.getFeatures()
        for f in featParcelles:
            if str(f['no_parcelle']).__contains__(input):
                self.ui.listWidget_resultats.addItem(f'{f["no_parcelle"]} - {f["commune"]}')
                self.ui.listWidget_resultats.itemDoubleClicked.connect(self.zoom)

            self.ui.lineEdit_parcelle.clear()

    def communes(self, input):
        communesLayer = iface.activeLayer()
        featCommunes = communesLayer.getFeatures()
        for f in featCommunes:
            if str(f['commune']).__contains__(input):
                self.ui.listWidget_resultats.addItem(f'{f["no_parcelle"]} - {f["commune"]}')
            else:
                self.ui.listWidget_resultats.addItem("Erreur: la commune n'existe pas")

        self.ui.lineEdit_commune.clear()

    def zoom(self, item):
        selected_item = item.text()
        layer = iface.activeLayer()
        for f in layer.getFeatures():
            if selected_item.startswith(f"{f['no_parcelle']} - {f['commune']}"):
                layer.removeSelection()
                layer.select(f.id())
                iface.mapCanvas().setExtent(f.geometry().boundingBox())
                iface.mapCanvas().refresh()
                break
